

module FSM_MSI(
    input [1:0] state_in,
    input cpu_write_hit, cpu_read_hit,
    input cpu_write_miss, cpu_read_miss,    
    output reg [1:0] state_next,bus_next
    );
    typedef enum{ INVALID= 0, MODIFIED, SHARED } name_of_state_cpu;
    parameter BUS_INVALIDATE=2'b00, BUS_WRITE_MISS=2'b01, BUS_READ_MISS=2'b10;

    initial begin
        state_next <= INVALID;
    end
    always@(*)begin
        case(state_in)
            INVALID:begin
                case({cpu_write,cpu_read})
                    2'b01: begin
                        state_next <= SHARED;
                    end
                    2'b10: begin
                        state_next <= MODIFIED;
                    end
                    default:begin
                        state_next <= 2'b11;//error code
                    end
                endcase
            end
            endcase
  
   endmodule                
            MODIFIED:begin
                case({cpu_write_hit,cpu_read_hit,cpu_write_miss,cpu_read_miss})
                    4'b0001:begin                      
                        state_next <= SHARED;
                        state_name_cpu<=SHARED;
                        bus_next <= BUS_READ_MISS;
                        write_back_block_next <= 1;
                    end
                    4'b0010:begin
                        state_next <= MODIFIED;
                        state_name_cpu<=MODIFIED;
                        bus_next <= BUS_WRITE_MISS;
                        write_back_block_next <=1;                  
                    end
                    4'b0100,4'b1000:begin
                        state_next <= MODIFIED;
                        state_name_cpu<=MODIFIED;
                        write_back_block_next <= 0;
                    end
                    default:begin
                        state_next <= 2'b11;//error code
                        bus_next <= 2'b11;
                        write_back_block_next <= 0;
                    end
                endcase          
            end
            SHARED:begin
                case({cpu_write_hit,cpu_read_hit,cpu_write_miss,cpu_read_miss})
                    4'b0001:begin
                        state_next <= SHARED;
                        state_name_cpu<=SHARED;
                        bus_next <= BUS_READ_MISS;
                        write_back_block_next <= 0;
                    end
                    4'b0010:begin
                        state_next <= MODIFIED;
                        state_name_cpu<=MODIFIED;
                        bus_next <= BUS_WRITE_MISS;
                        write_back_block_next <= 0;
                    end
                    4'b0100:begin
                        state_next <= SHARED;
                        state_name_cpu<=SHARED;
                        write_back_block_next <= 0;
                    end
                    4'b1000:begin
                        state_next <= MODIFIED;
                        state_name_cpu<=MODIFIED;
                        bus_next <= BUS_INVALIDATE;
                        write_back_block_next <= 0;
                    end
                    default:begin
                        state_next <= 2'b11;//error code
                        bus_next <= 2'b11;
                        write_back_block_next <= 0;
                    end
                endcase
            end
            
            
            
